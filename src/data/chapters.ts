import { Chapter } from '../types';

export const chapters: Chapter[] = [
  {
    id: 1,
    title: "Printing and Variables",
    description: "Master Python's print function and learn to store data in variables",
    difficulty: "Beginner",
    unlocked: true,
    completed: false,
    flashcards: [
      { id: 1, front: "What does this do?\n\nprint(\"Hello!\")", back: "It says Hello! on the screen. (Finally, a computer that talks back nicely!)", flipped: false },
      { id: 2, front: "Why do we put quotes around text in print()?", back: "So Python knows it's text, not math. (Without quotes, Python thinks \"pizza\" is algebra!)", flipped: false },
      { id: 3, front: "What will this print?\n\nprint(\"2 + 2\")", back: "It prints 2 + 2 (just text, no math).", flipped: false },
      { id: 4, front: "What will this print?\n\nprint(2 + 2)", back: "It prints 4 (now it's math).", flipped: false },
      { id: 5, front: "Can you print emojis?", back: "Yep!\n\nprint(\"üêç‚ú®üî•\")", flipped: false },
      { id: 6, front: "What is a variable in Python?", back: "A box with a name where you store stuff. (Like a backpack for numbers or words.)", flipped: false },
      { id: 7, front: "What's the variable here?\n\nage = 13", back: "age (it stores the number 13).", flipped: false },
      { id: 8, front: "What happens if you run this?\n\nname = \"Taylor\"\nprint(name)", back: "It prints: Taylor.", flipped: false },
      { id: 9, front: "What's the difference?\n\nprint(\"name\")\nprint(name)", back: "\"name\" prints the word name.\nname prints what's inside the box.", flipped: false },
      { id: 10, front: "Why do we use variables?", back: "To reuse data without typing it 100 times. (Imagine writing your name in every single print statement‚Äîno thanks!)", flipped: false },
      { id: 11, front: "Fill the blank:\n\nsnack = \"Takis\"\nprint(\"My favorite snack is\", ___)", back: "snack", flipped: false },
      { id: 12, front: "What does this print?\n\nanimal = \"dog\"\ncolor = \"blue\"\nprint(\"My\", animal, \"is\", color)", back: "My dog is blue (weird dog, but okay).", flipped: false },
      { id: 13, front: "Spot the mistake:\n\n5years = \"old\"", back: "Variables can't start with numbers!", flipped: false },
      { id: 14, front: "True or False:\n\nname = \"Sam\"\nName = \"Alex\"\n\nBoth variables are the same.", back: "False! Python cares about upper/lowercase.", flipped: false },
      { id: 15, front: "What will this print?\n\nage = 12\nprint(\"Next year I'll be\", age + 1)", back: "Next year I'll be 13.", flipped: false },
      { id: 16, front: "Predict the output:\n\nx = 7\nx = x + 3\nprint(x)", back: "10", flipped: false },
      { id: 17, front: "What does this code do?\n\nname = \"Chris\"\nprint(\"Hi \" + name)", back: "Prints: Hi Chris (adding strings together = concatenation).", flipped: false },
      { id: 18, front: "What error will this cause?\n\nnumber = 10\nprint(\"My number is \" + number)", back: "TypeError! (Python can't mix text + numbers without str().)", flipped: false },
      { id: 19, front: "Fix the code above.", back: "print(\"My number is \" + str(number))", flipped: false },
      { id: 20, front: "Can you swap values?\n\na = \"apples\"\nb = \"bananas\"\na, b = b, a\nprint(a, b)", back: "bananas apples", flipped: false },
      { id: 21, front: "Predict:\n\nteacher = \"Mr. Smith\"\nprint(\"Our teacher is\", teacher, \"and he's awesome!\")", back: "Our teacher is Mr. Smith and he's awesome!", flipped: false },
      { id: 22, front: "What prints?\n\ngamer = \"Minecraft\"\nprint(\"I play\", gamer, \"every day!\")", back: "I play Minecraft every day!", flipped: false },
      { id: 23, front: "Imagine:\n\nsnack = \"pizza\"\ndrink = \"boba\"\nprint(\"Best lunch ever:\", snack, \"and\", drink)", back: "Best lunch ever: pizza and boba", flipped: false },
      { id: 24, front: "Code joke:\n\nhomework = \"done\"\nprint(\"Is my homework\", homework, \"?\")", back: "Prints: Is my homework done? (If only that were true...)", flipped: false },
      { id: 25, front: "Challenge: Create your own variable for your favorite game, song, or food and print a funny sentence with it!", back: "Example:\n\ngame = \"Fortnite\"\nprint(\"I once played\", game, \"for 8 hours straight!\")", flipped: false }
    ],
    questions: [
      { id: 1, question: "What will this code print?\n\nprint(\"2 + 3\")", options: ["5", "2 + 3", "Error", "23"], correctAnswer: 1, answered: false },
      { id: 2, question: "Which of these is a correct variable name?", options: ["3dogs", "my-name", "dog3", "print"], correctAnswer: 2, answered: false },
      { id: 3, question: "What's the difference between these two lines?\n\nprint(\"age\")\nprint(age)", options: ["Both print the same thing", "The first prints the word age, the second prints the value inside the variable", "The first is wrong, the second is correct", "Both cause errors"], correctAnswer: 1, answered: false },
      { id: 4, question: "Which output comes from this code?\n\nsnack = \"Takis\"\nprint(\"My favorite snack is\", snack)", options: ["My favorite snack is snack", "My favorite snack is Takis", "Takis My favorite snack is", "Error"], correctAnswer: 1, answered: false },
      { id: 5, question: "What happens here?\n\nnumber = 10\nprint(\"My number is \" + number)", options: ["Prints: My number is 10", "Prints: My number is number", "Error ‚Äì can't add string and number", "Prints nothing"], correctAnswer: 2, answered: false },
      { id: 6, question: "What will be printed?\n\nx = 7\nx = x + 3\nprint(x)", options: ["7", "10", "x + 3", "Error"], correctAnswer: 1, answered: false },
      { id: 7, question: "Which line of code will correctly print this sentence?\nMy dog is blue", options: ["print(\"My dog is blue\")", "animal = dog\ncolor = blue\nprint(\"My\", animal, \"is\", color)", "animal = \"dog\"\ncolor = \"blue\"\nprint(\"My\", animal, \"is\", color)", "print(My dog is blue)"], correctAnswer: 2, answered: false },
      { id: 8, question: "If we write:\n\nName = \"Alex\"\nname = \"Sam\"\nprint(Name)\n\nWhat will be printed?", options: ["Alex", "Sam", "Both Alex and Sam", "Error"], correctAnswer: 0, answered: false },
      { id: 9, question: "Which one is true about variables in Python?", options: ["They are only for numbers", "They store data that can change", "They must always start with a capital letter", "They disappear after one print"], correctAnswer: 1, answered: false },
      { id: 10, question: "Which of these will successfully print emojis?", options: ["print(\"üêç‚ú®üî•\")", "print(üêç‚ú®üî•)", "print(\"snake, sparkles, fire\")", "print(emojiüêç)"], correctAnswer: 0, answered: false }
    ]
  },
  {
    id: 2,
    title: "Basic Operations",
    description: "Master arithmetic and comparison operations",
    difficulty: "Beginner",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "Basic arithmetic operators?", back: "+ (add), - (subtract), * (multiply), / (divide), // (floor divide), % (modulo), ** (power)", flipped: false },
      { id: 2, front: "What is floor division?", back: "// operator that divides and rounds down to nearest integer", flipped: false },
      { id: 3, front: "What is modulo operator?", back: "% operator that returns remainder after division", flipped: false },
      { id: 4, front: "Comparison operators?", back: "== (equal), != (not equal), < (less), > (greater), <= (less/equal), >= (greater/equal)", flipped: false },
      { id: 5, front: "What is operator precedence?", back: "Order: ** ‚Üí *, /, //, % ‚Üí +, - ‚Üí comparisons", flipped: false },
      { id: 6, front: "Logical operators?", back: "and (both true), or (either true), not (opposite)", flipped: false },
      { id: 7, front: "What is += operator?", back: "Shorthand for x = x + value, also works for -=, *=, /=", flipped: false },
      { id: 8, front: "How to chain comparisons?", back: "x < y < z is equivalent to x < y and y < z", flipped: false },
      { id: 9, front: "What is is operator?", back: "Checks if two variables refer to same object in memory", flipped: false },
      { id: 10, front: "What is in operator?", back: "Checks if value exists in sequence: 'a' in 'cat'", flipped: false }
    ],
    questions: [
      { id: 1, question: "What is 7 // 2?", options: ["3.5", "3", "4", "2"], correctAnswer: 1, answered: false },
      { id: 2, question: "What is 10 % 3?", options: ["3", "1", "0", "10"], correctAnswer: 1, answered: false },
      { id: 3, question: "What is 2 ** 3?", options: ["6", "8", "9", "5"], correctAnswer: 1, answered: false },
      { id: 4, question: "What is True and False?", options: ["True", "False", "1", "0"], correctAnswer: 1, answered: false },
      { id: 5, question: "What is 5 > 3 > 1?", options: ["True", "False", "Error", "None"], correctAnswer: 0, answered: false },
      { id: 6, question: "What is not True?", options: ["True", "False", "1", "0"], correctAnswer: 1, answered: false },
      { id: 7, question: "What is 0 or 5?", options: ["0", "5", "True", "False"], correctAnswer: 1, answered: false },
      { id: 8, question: "What happens with x += 3?", options: ["x = x + 3", "x = 3", "Error", "x = x * 3"], correctAnswer: 0, answered: false },
      { id: 9, question: "What is [] is []?", options: ["True", "False", "Error", "None"], correctAnswer: 1, answered: false },
      { id: 10, question: "What is 'p' in 'python'?", options: ["True", "False", "Error", "'p'"], correctAnswer: 0, answered: false }
    ]
  },
  {
    id: 3,
    title: "Strings",
    description: "Explore string manipulation and formatting",
    difficulty: "Beginner",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "How to create strings?", back: "Single quotes 'text', double quotes \"text\", or triple quotes '''text'''", flipped: false },
      { id: 2, front: "String concatenation methods?", back: "+ operator, join() method, or f-strings", flipped: false },
      { id: 3, front: "What are escape characters?", back: "\\n (newline), \\t (tab), \\' (quote), \\\\ (backslash)", flipped: false },
      { id: 4, front: "String indexing syntax?", back: "string[0] for first, string[-1] for last character", flipped: false },
      { id: 5, front: "String slicing syntax?", back: "string[start:end:step] - end is exclusive", flipped: false },
      { id: 6, front: "Common string methods?", back: "upper(), lower(), strip(), split(), replace(), find()", flipped: false },
      { id: 7, front: "What are f-strings?", back: "Formatted string literals: f'Hello {name}!'", flipped: false },
      { id: 8, front: "How to check string content?", back: "isalpha(), isdigit(), isalnum(), isspace() methods", flipped: false },
      { id: 9, front: "String formatting methods?", back: "% formatting, .format() method, f-strings (newest)", flipped: false },
      { id: 10, front: "Are strings mutable?", back: "No, strings are immutable - operations create new strings", flipped: false }
    ],
    questions: [
      { id: 1, question: "What is 'Hello'[1]?", options: ["'H'", "'e'", "'l'", "1"], correctAnswer: 1, answered: false },
      { id: 2, question: "What is 'Python'[-1]?", options: ["'P'", "'n'", "'o'", "Error"], correctAnswer: 1, answered: false },
      { id: 3, question: "What is 'Hello'[1:4]?", options: ["'ell'", "'ello'", "'Hell'", "'Hel'"], correctAnswer: 0, answered: false },
      { id: 4, question: "What does 'HELLO'.lower() return?", options: ["'HELLO'", "'hello'", "'Hello'", "Error"], correctAnswer: 1, answered: false },
      { id: 5, question: "What is len('Hi\\n')?", options: ["2", "3", "4", "Error"], correctAnswer: 1, answered: false },
      { id: 6, question: "What is 'a' * 3?", options: ["'a3'", "'aaa'", "Error", "3"], correctAnswer: 1, answered: false },
      { id: 7, question: "What is 'Hi' + 'There'?", options: ["'Hi There'", "'HiThere'", "Error", "'Hi', 'There'"], correctAnswer: 1, answered: false },
      { id: 8, question: "What does '123'.isdigit() return?", options: ["True", "False", "123", "Error"], correctAnswer: 0, answered: false },
      { id: 9, question: "What is f'Result: {2+3}'?", options: ["'Result: 2+3'", "'Result: 5'", "Error", "5"], correctAnswer: 1, answered: false },
      { id: 10, question: "What does 'a,b,c'.split(',') return?", options: ["'abc'", "['a', 'b', 'c']", "('a', 'b', 'c')", "Error"], correctAnswer: 1, answered: false }
    ]
  },
  {
    id: 4,
    title: "Lists",
    description: "Work with Python lists and list operations",
    difficulty: "Beginner",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "How to create a list?", back: "Use square brackets: [1, 2, 3] or list() function", flipped: false },
      { id: 2, front: "Are lists mutable?", back: "Yes, you can change, add, or remove elements after creation", flipped: false },
      { id: 3, front: "List indexing and slicing?", back: "Same as strings: list[0], list[-1], list[1:3]", flipped: false },
      { id: 4, front: "How to add elements?", back: "append() adds to end, insert(index, item) adds at position", flipped: false },
      { id: 5, front: "How to remove elements?", back: "remove(value), pop(index), del list[index], clear()", flipped: false },
      { id: 6, front: "Common list methods?", back: "append(), insert(), remove(), pop(), sort(), reverse(), count(), index()", flipped: false },
      { id: 7, front: "List concatenation?", back: "Use + operator or extend() method", flipped: false },
      { id: 8, front: "How to copy a list?", back: "list.copy(), list[:], or list(original_list)", flipped: false },
      { id: 9, front: "Nested lists?", back: "Lists can contain other lists: [[1,2], [3,4]]", flipped: false },
      { id: 10, front: "List comprehensions?", back: "Concise way to create lists: [x*2 for x in range(5)]", flipped: false }
    ],
    questions: [
      { id: 1, question: "What is [1,2,3][1]?", options: ["1", "2", "3", "Error"], correctAnswer: 1, answered: false },
      { id: 2, question: "What does [1,2,3].append(4) return?", options: ["[1,2,3,4]", "None", "4", "Error"], correctAnswer: 1, answered: false },
      { id: 3, question: "What is len([1,[2,3],4])?", options: ["4", "3", "5", "2"], correctAnswer: 1, answered: false },
      { id: 4, question: "What does [1,2,3].pop() return?", options: ["[1,2]", "3", "1", "None"], correctAnswer: 1, answered: false },
      { id: 5, question: "What is [1,2] + [3,4]?", options: ["[1,2,3,4]", "[4,6]", "Error", "10"], correctAnswer: 0, answered: false },
      { id: 6, question: "What is [3,1,2].sort()?", options: ["[1,2,3]", "None", "[3,1,2]", "Error"], correctAnswer: 1, answered: false },
      { id: 7, question: "What is [1,2,3,2].count(2)?", options: ["1", "2", "3", "4"], correctAnswer: 1, answered: false },
      { id: 8, question: "What is list('abc')?", options: ["'abc'", "['abc']", "['a','b','c']", "Error"], correctAnswer: 2, answered: false },
      { id: 9, question: "What is [1,2,3][::-1]?", options: ["[1,2,3]", "[3,2,1]", "[3]", "Error"], correctAnswer: 1, answered: false },
      { id: 10, question: "What is [x for x in range(3)]?", options: ["[0,1,2]", "[1,2,3]", "range(3)", "Error"], correctAnswer: 0, answered: false }
    ]
  },
  {
    id: 5,
    title: "Dictionaries",
    description: "Master dictionary data structure and operations",
    difficulty: "Intermediate",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "What is a dictionary?", back: "Collection of key-value pairs, unordered and mutable", flipped: false },
      { id: 2, front: "How to create a dictionary?", back: "Use curly braces: {'key': 'value'} or dict() function", flipped: false },
      { id: 3, front: "How to access values?", back: "dict['key'] or dict.get('key', default)", flipped: false },
      { id: 4, front: "How to add/update items?", back: "dict['key'] = value or dict.update({'key': 'value'})", flipped: false },
      { id: 5, front: "How to remove items?", back: "del dict['key'], dict.pop('key'), dict.popitem(), dict.clear()", flipped: false },
      { id: 6, front: "Dictionary methods?", back: "keys(), values(), items(), get(), pop(), update(), clear()", flipped: false },
      { id: 7, front: "Can keys be any type?", back: "Keys must be immutable: strings, numbers, tuples (not lists)", flipped: false },
      { id: 8, front: "How to iterate dictionaries?", back: "for key in dict, for value in dict.values(), for key,value in dict.items()", flipped: false },
      { id: 9, front: "Dictionary comprehensions?", back: "{k: v for k, v in items} - create dicts concisely", flipped: false },
      { id: 10, front: "Nested dictionaries?", back: "Dictionaries can contain other dictionaries as values", flipped: false }
    ],
    questions: [
      { id: 1, question: "What is {'a': 1}['a']?", options: ["'a'", "1", "{'a': 1}", "Error"], correctAnswer: 1, answered: false },
      { id: 2, question: "What happens with missing key dict['x']?", options: ["None", "''", "KeyError", "0"], correctAnswer: 2, answered: false },
      { id: 3, question: "What is dict.get('missing', 'default')?", options: ["KeyError", "'missing'", "'default'", "None"], correctAnswer: 2, answered: false },
      { id: 4, question: "What does len({'a':1, 'b':2}) return?", options: ["1", "2", "3", "4"], correctAnswer: 1, answered: false },
      { id: 5, question: "Can [1,2] be a dictionary key?", options: ["Yes", "No", "Sometimes", "Only if sorted"], correctAnswer: 1, answered: false },
      { id: 6, question: "What does dict.keys() return?", options: ["list", "dict_keys object", "tuple", "string"], correctAnswer: 1, answered: false },
      { id: 7, question: "What is dict({'a': 1, 'b': 2})?", options: ["Error", "{'a': 1, 'b': 2}", "['a', 'b']", "[1, 2]"], correctAnswer: 1, answered: false },
      { id: 8, question: "What does {}.pop('x', 'default') return?", options: ["'x'", "'default'", "KeyError", "None"], correctAnswer: 1, answered: false },
      { id: 9, question: "What is {k: k*2 for k in range(3)}?", options: ["{0:0, 1:2, 2:4}", "{0:0, 1:1, 2:2}", "Error", "[0,2,4]"], correctAnswer: 0, answered: false },
      { id: 10, question: "What does dict.items() return?", options: ["list of tuples", "dict_items object", "list of keys", "list of values"], correctAnswer: 1, answered: false }
    ]
  },
  {
    id: 6,
    title: "Conditionals",
    description: "Learn if/else statements and conditional logic",
    difficulty: "Beginner",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "Basic if statement syntax?", back: "if condition:\n    code_block", flipped: false },
      { id: 2, front: "If-else syntax?", back: "if condition:\n    code\nelse:\n    other_code", flipped: false },
      { id: 3, front: "Multiple conditions?", back: "if condition:\n    code\nelif other_condition:\n    code\nelse:\n    code", flipped: false },
      { id: 4, front: "What is truthy/falsy?", back: "Truthy: non-zero numbers, non-empty strings/lists. Falsy: 0, '', [], None, False", flipped: false },
      { id: 5, front: "Logical operators in conditions?", back: "and, or, not - combine multiple conditions", flipped: false },
      { id: 6, front: "Comparison chaining?", back: "18 <= age < 65 checks if age is between 18 and 64", flipped: false },
      { id: 7, front: "Ternary operator?", back: "value_if_true if condition else value_if_false", flipped: false },
      { id: 8, front: "Membership testing?", back: "Use 'in' and 'not in': if 'a' in 'cat'", flipped: false },
      { id: 9, front: "Identity testing?", back: "Use 'is' and 'is not': if x is None", flipped: false },
      { id: 10, front: "Nested conditionals?", back: "if statements inside other if statements", flipped: false }
    ],
    questions: [
      { id: 1, question: "What runs if condition is False?", options: ["if block", "elif block", "else block", "Nothing"], correctAnswer: 2, answered: false },
      { id: 2, question: "What is bool([0])?", options: ["True", "False", "0", "Error"], correctAnswer: 0, answered: false },
      { id: 3, question: "What is 5 if True else 3?", options: ["True", "5", "3", "Error"], correctAnswer: 1, answered: false },
      { id: 4, question: "When does elif execute?", options: ["Always", "If condition true", "If previous conditions false", "Never"], correctAnswer: 2, answered: false },
      { id: 5, question: "What is not []?", options: ["True", "False", "[]", "Error"], correctAnswer: 0, answered: false },
      { id: 6, question: "What is True and False or True?", options: ["True", "False", "Error", "None"], correctAnswer: 0, answered: false },
      { id: 7, question: "How many elif can you have?", options: ["0", "1", "Unlimited", "2"], correctAnswer: 2, answered: false },
      { id: 8, question: "What is 'a' in 'cat'?", options: ["True", "False", "'a'", "Error"], correctAnswer: 0, answered: false },
      { id: 9, question: "What is None is None?", options: ["True", "False", "None", "Error"], correctAnswer: 0, answered: false },
      { id: 10, question: "What happens without else?", options: ["Error", "Nothing special", "Default else runs", "Code breaks"], correctAnswer: 1, answered: false }
    ]
  },
  {
    id: 7,
    title: "Loops",
    description: "Master for and while loops for iteration",
    difficulty: "Intermediate",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "For loop syntax?", back: "for item in iterable:\n    code_block", flipped: false },
      { id: 2, front: "While loop syntax?", back: "while condition:\n    code_block", flipped: false },
      { id: 3, front: "What is range() function?", back: "Generates sequence of numbers: range(start, stop, step)", flipped: false },
      { id: 4, front: "How to exit loops early?", back: "break statement exits loop, continue skips to next iteration", flipped: false },
      { id: 5, front: "What is enumerate()?", back: "Returns index and value: for i, item in enumerate(list)", flipped: false },
      { id: 6, front: "Loop with else clause?", back: "else runs only if loop completes normally (no break)", flipped: false },
      { id: 7, front: "Nested loops?", back: "Loops inside other loops - inner loop runs completely for each outer iteration", flipped: false },
      { id: 8, front: "Iterate over dictionary?", back: "for key in dict, for key, value in dict.items()", flipped: false },
      { id: 9, front: "What is zip() function?", back: "Combines multiple iterables: for a, b in zip(list1, list2)", flipped: false },
      { id: 10, front: "Infinite loop prevention?", back: "Ensure while condition eventually becomes False or use break", flipped: false }
    ],
    questions: [
      { id: 1, question: "What does range(3) generate?", options: ["[1,2,3]", "[0,1,2]", "[0,1,2,3]", "Error"], correctAnswer: 1, answered: false },
      { id: 2, question: "What does break do?", options: ["Skips iteration", "Exits loop", "Pauses loop", "Restarts loop"], correctAnswer: 1, answered: false },
      { id: 3, question: "What does continue do?", options: ["Exits loop", "Skips to next iteration", "Restarts loop", "Pauses loop"], correctAnswer: 1, answered: false },
      { id: 4, question: "What is range(1, 5, 2)?", options: ["[1,3]", "[1,2,3,4]", "[1,3,5]", "[2,4]"], correctAnswer: 0, answered: false },
      { id: 5, question: "When does loop's else run?", options: ["Always", "Never", "If no break", "If break occurs"], correctAnswer: 2, answered: false },
      { id: 6, question: "What does enumerate(['a','b']) give?", options: ["[0,1]", "['a','b']", "[(0,'a'),(1,'b')]", "Error"], correctAnswer: 2, answered: false },
      { id: 7, question: "What's the output of: for i in range(2): print(i)", options: ["0\\n1", "1\\n2", "0\\n1\\n2", "1"], correctAnswer: 0, answered: false },
      { id: 8, question: "How to iterate with index?", options: ["for i in list", "enumerate(list)", "range(len(list))", "Both B and C"], correctAnswer: 3, answered: false },
      { id: 9, question: "What does zip([1,2], ['a','b']) return?", options: ["[1,2,'a','b']", "[(1,'a'),(2,'b')]", "Error", "[[1,'a'],[2,'b']]"], correctAnswer: 1, answered: false },
      { id: 10, question: "What stops a while loop?", options: ["break only", "condition False only", "Both A and B", "return statement"], correctAnswer: 2, answered: false }
    ]
  },
  {
    id: 8,
    title: "Functions",
    description: "Create and use functions effectively",
    difficulty: "Intermediate",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "Function definition syntax?", back: "def function_name(parameters):\n    code\n    return value", flipped: false },
      { id: 2, front: "How to call a function?", back: "function_name(arguments) - arguments match parameters", flipped: false },
      { id: 3, front: "What is return statement?", back: "Sends value back to caller and exits function", flipped: false },
      { id: 4, front: "Default parameters?", back: "def func(param=default_value): - used if no argument provided", flipped: false },
      { id: 5, front: "Keyword arguments?", back: "Call with parameter names: func(name='John', age=25)", flipped: false },
      { id: 6, front: "Variable number of arguments?", back: "*args for positional, **kwargs for keyword arguments", flipped: false },
      { id: 7, front: "Function scope?", back: "Variables inside function are local, outside are global", flipped: false },
      { id: 8, front: "What is a lambda function?", back: "Anonymous function: lambda x: x*2", flipped: false },
      { id: 9, front: "Function documentation?", back: "Use docstrings: triple quotes after def line", flipped: false },
      { id: 10, front: "Functions as objects?", back: "Functions can be assigned to variables, passed as arguments", flipped: false }
    ],
    questions: [
      { id: 1, question: "What does a function without return give?", options: ["Error", "None", "0", "''"], correctAnswer: 1, answered: false },
      { id: 2, question: "How to define default parameter?", options: ["def f(x=5):", "def f(x:5):", "def f(x->5):", "def f(5=x):"], correctAnswer: 0, answered: false },
      { id: 3, question: "What is *args?", options: ["Error", "List of arguments", "Tuple of arguments", "Dictionary"], correctAnswer: 2, answered: false },
      { id: 4, question: "What is **kwargs?", options: ["Tuple", "List", "Dictionary", "String"], correctAnswer: 2, answered: false },
      { id: 5, question: "What does lambda x: x*2 create?", options: ["Variable", "Function", "Class", "Error"], correctAnswer: 1, answered: false },
      { id: 6, question: "Where are local variables accessible?", options: ["Everywhere", "Inside function only", "Outside function only", "Never"], correctAnswer: 1, answered: false },
      { id: 7, question: "How to access global variable in function?", options: ["global keyword", "nonlocal keyword", "import", "Automatically"], correctAnswer: 0, answered: false },
      { id: 8, question: "What is func(1, 2, c=3) syntax?", options: ["Error", "Positional then keyword", "All keyword", "All positional"], correctAnswer: 1, answered: false },
      { id: 9, question: "Can functions return multiple values?", options: ["Yes, as tuple", "No", "Only lists", "Only dictionaries"], correctAnswer: 0, answered: false },
      { id: 10, question: "What is recursion?", options: ["Function loop", "Function calling itself", "Multiple functions", "Function parameter"], correctAnswer: 1, answered: false }
    ]
  },
  {
    id: 9,
    title: "Classes & Objects",
    description: "Understand object-oriented programming basics",
    difficulty: "Advanced",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "What is a class?", back: "Blueprint for creating objects with attributes and methods", flipped: false },
      { id: 2, front: "Class definition syntax?", back: "class ClassName:\n    def __init__(self, params):\n        self.attribute = value", flipped: false },
      { id: 3, front: "What is __init__ method?", back: "Constructor method that initializes object when created", flipped: false },
      { id: 4, front: "What is self parameter?", back: "Reference to the instance of the class", flipped: false },
      { id: 5, front: "Instance vs class attributes?", back: "Instance: unique per object. Class: shared by all objects", flipped: false },
      { id: 6, front: "What are methods?", back: "Functions defined inside a class that operate on objects", flipped: false },
      { id: 7, front: "Object instantiation?", back: "obj = ClassName(arguments) - creates new object", flipped: false },
      { id: 8, front: "What is inheritance?", back: "Class can inherit attributes and methods from parent class", flipped: false },
      { id: 9, front: "Method overriding?", back: "Child class can redefine parent class methods", flipped: false },
      { id: 10, front: "Special methods?", back: "__str__, __len__, __add__ etc. - define object behavior", flipped: false }
    ],
    questions: [
      { id: 1, question: "What is required in every method?", options: ["return", "self", "class", "__init__"], correctAnswer: 1, answered: false },
      { id: 2, question: "When is __init__ called?", options: ["Manual call", "Object creation", "Method call", "Class definition"], correctAnswer: 1, answered: false },
      { id: 3, question: "How to access attribute?", options: ["obj.attribute", "obj[attribute]", "obj(attribute)", "attribute(obj)"], correctAnswer: 0, answered: false },
      { id: 4, question: "What is class inheritance syntax?", options: ["class Child(Parent):", "class Child->Parent:", "class Child:Parent", "class Child.Parent:"], correctAnswer: 0, answered: false },
      { id: 5, question: "What does super() do?", options: ["Creates object", "Accesses parent class", "Deletes object", "Copies object"], correctAnswer: 1, answered: false },
      { id: 6, question: "Class attribute vs instance attribute?", options: ["Same thing", "Class shared, instance unique", "Class unique, instance shared", "No difference"], correctAnswer: 1, answered: false },
      { id: 7, question: "What is __str__ method for?", options: ["String conversion", "Length calculation", "Object creation", "Method calling"], correctAnswer: 0, answered: false },
      { id: 8, question: "How to check object type?", options: ["type(obj)", "isinstance(obj, Class)", "obj.__class__", "All of the above"], correctAnswer: 3, answered: false },
      { id: 9, question: "Can methods return self?", options: ["Yes", "No", "Sometimes", "Only in __init__"], correctAnswer: 0, answered: false },
      { id: 10, question: "What is method chaining?", options: ["Multiple inheritance", "Calling methods in sequence", "Method overriding", "Class composition"], correctAnswer: 1, answered: false }
    ]
  },
  {
    id: 10,
    title: "File Handling",
    description: "Read from and write to files",
    difficulty: "Intermediate",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "How to open a file?", back: "open(filename, mode) - returns file object", flipped: false },
      { id: 2, front: "File opening modes?", back: "'r' (read), 'w' (write), 'a' (append), 'x' (create), 'b' (binary)", flipped: false },
      { id: 3, front: "How to read file content?", back: "read() (all), readline() (one line), readlines() (list)", flipped: false },
      { id: 4, front: "How to write to file?", back: "write(string) or writelines(list_of_strings)", flipped: false },
      { id: 5, front: "Why close files?", back: "Frees resources and ensures data is written", flipped: false },
      { id: 6, front: "What is with statement?", back: "Context manager that automatically closes file", flipped: false },
      { id: 7, front: "File position methods?", back: "tell() (current position), seek(position) (move to position)", flipped: false },
      { id: 8, front: "How to check if file exists?", back: "Use os.path.exists() or pathlib.Path.exists()", flipped: false },
      { id: 9, front: "Handle file errors?", back: "Use try/except for FileNotFoundError, PermissionError", flipped: false },
      { id: 10, front: "Binary vs text mode?", back: "Text mode handles encoding, binary mode for images/data", flipped: false }
    ],
    questions: [
      { id: 1, question: "Best practice for file handling?", options: ["open/close manually", "with statement", "never close", "global files"], correctAnswer: 1, answered: false },
      { id: 2, question: "What does 'w' mode do?", options: ["Read only", "Write (overwrites)", "Append", "Create if not exists"], correctAnswer: 1, answered: false },
      { id: 3, question: "What does 'a' mode do?", options: ["Read only", "Write (overwrites)", "Append to end", "Create new"], correctAnswer: 2, answered: false },
      { id: 4, question: "What does read() return for empty file?", options: ["None", "''", "[]", "Error"], correctAnswer: 1, answered: false },
      { id: 5, question: "What does readlines() return?", options: ["String", "List of strings", "Tuple", "Dictionary"], correctAnswer: 1, answered: false },
      { id: 6, question: "How to read file line by line efficiently?", options: ["readlines()", "for line in file", "readline() loop", "read().split()"], correctAnswer: 1, answered: false },
      { id: 7, question: "What happens if file doesn't exist in 'r' mode?", options: ["Creates file", "Returns None", "FileNotFoundError", "Empty string"], correctAnswer: 2, answered: false },
      { id: 8, question: "What is file.seek(0)?", options: ["Go to end", "Go to start", "Go to middle", "Error"], correctAnswer: 1, answered: false },
      { id: 9, question: "What encoding is default for text files?", options: ["ASCII", "UTF-8", "Latin-1", "UTF-16"], correctAnswer: 1, answered: false },
      { id: 10, question: "How to write list to file?", options: ["write(list)", "writelines(list)", "print(list, file=f)", "Both B and C"], correctAnswer: 3, answered: false }
    ]
  },
  {
    id: 11,
    title: "Error Handling",
    description: "Handle exceptions and errors gracefully",
    difficulty: "Intermediate",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "Basic try-except syntax?", back: "try:\n    risky_code\nexcept ExceptionType:\n    handle_error", flipped: false },
      { id: 2, front: "Common exception types?", back: "ValueError, TypeError, KeyError, IndexError, FileNotFoundError", flipped: false },
      { id: 3, front: "Catch multiple exceptions?", back: "except (ValueError, TypeError): or separate except blocks", flipped: false },
      { id: 4, front: "What is finally block?", back: "Code that runs regardless of whether exception occurred", flipped: false },
      { id: 5, front: "What is else block in try?", back: "Runs only if no exception occurred in try block", flipped: false },
      { id: 6, front: "How to access exception details?", back: "except Exception as e: then use e", flipped: false },
      { id: 7, front: "How to raise exceptions?", back: "raise ExceptionType('message') or just raise", flipped: false },
      { id: 8, front: "Custom exceptions?", back: "class CustomError(Exception): pass", flipped: false },
      { id: 9, front: "Exception hierarchy?", back: "BaseException -> Exception -> specific exceptions", flipped: false },
      { id: 10, front: "When to use exceptions?", back: "For exceptional situations, not normal control flow", flipped: false }
    ],
    questions: [
      { id: 1, question: "What happens if no exception in try?", options: ["except runs", "else runs", "finally runs", "Both B and C"], correctAnswer: 3, answered: false },
      { id: 2, question: "What does finally block do?", options: ["Runs if error", "Runs if no error", "Always runs", "Never runs"], correctAnswer: 2, answered: false },
      { id: 3, question: "How to catch any exception?", options: ["except:", "except Exception:", "except BaseException:", "All of the above"], correctAnswer: 3, answered: false },
      { id: 4, question: "What does int('abc') raise?", options: ["TypeError", "ValueError", "KeyError", "IndexError"], correctAnswer: 1, answered: false },
      { id: 5, question: "What does [1,2][5] raise?", options: ["ValueError", "TypeError", "KeyError", "IndexError"], correctAnswer: 3, answered: false },
      { id: 6, question: "How to re-raise caught exception?", options: ["raise e", "raise", "throw", "exception()"], correctAnswer: 1, answered: false },
      { id: 7, question: "What is assert statement?", options: ["Exception handler", "Condition checker", "Loop control", "Function definer"], correctAnswer: 1, answered: false },
      { id: 8, question: "When does else block run?", options: ["Always", "If exception", "If no exception", "Never"], correctAnswer: 2, answered: false },
      { id: 9, question: "What inherits from Exception?", options: ["All errors", "Most errors", "System errors only", "User errors only"], correctAnswer: 1, answered: false },
      { id: 10, question: "Best practice for exception handling?", options: ["Catch all exceptions", "Be specific", "Ignore exceptions", "Always use finally"], correctAnswer: 1, answered: false }
    ]
  },
  {
    id: 12,
    title: "Modules & Packages",
    description: "Organize code with modules and packages",
    difficulty: "Advanced",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "What is a module?", back: "A .py file containing Python code that can be imported", flipped: false },
      { id: 2, front: "How to import modules?", back: "import module, from module import name, import module as alias", flipped: false },
      { id: 3, front: "What is __name__ == '__main__'?", back: "Checks if script is run directly (not imported)", flipped: false },
      { id: 4, front: "What is a package?", back: "Directory containing __init__.py and multiple modules", flipped: false },
      { id: 5, front: "Standard library modules?", back: "os, sys, math, random, datetime, json, re, collections", flipped: false },
      { id: 6, front: "What is pip?", back: "Package installer for Python - installs from PyPI", flipped: false },
      { id: 7, front: "Module search path?", back: "Current directory, PYTHONPATH, standard library, site-packages", flipped: false },
      { id: 8, front: "What is __init__.py?", back: "Makes directory a package, runs when package imported", flipped: false },
      { id: 9, front: "Relative vs absolute imports?", back: "Absolute: from package.module, Relative: from .module", flipped: false },
      { id: 10, front: "Virtual environments?", back: "Isolated Python environments with separate package installations", flipped: false }
    ],
    questions: [
      { id: 1, question: "How to import specific function?", options: ["import module.function", "from module import function", "import function from module", "module.import(function)"], correctAnswer: 1, answered: false },
      { id: 2, question: "What does import math as m do?", options: ["Error", "Creates alias 'm'", "Imports as 'math'", "Imports partially"], correctAnswer: 1, answered: false },
      { id: 3, question: "When does __name__ == '__main__'?", options: ["Always", "When imported", "When run directly", "Never"], correctAnswer: 2, answered: false },
      { id: 4, question: "What makes a directory a package?", options: ["__init__.py", "__package__.py", "__main__.py", "Just Python files"], correctAnswer: 0, answered: false },
      { id: 5, question: "How to see module location?", options: ["module.__file__", "module.__path__", "module.__location__", "module.__dir__"], correctAnswer: 0, answered: false },
      { id: 6, question: "What is sys.path?", options: ["Current path", "Module search paths", "System path", "File path"], correctAnswer: 1, answered: false },
      { id: 7, question: "How to install packages?", options: ["pip install package", "python install package", "import install package", "install package"], correctAnswer: 0, answered: false },
      { id: 8, question: "What does from module import * do?", options: ["Imports everything", "Imports nothing", "Error", "Imports main only"], correctAnswer: 0, answered: false },
      { id: 9, question: "What is requirements.txt?", options: ["Code file", "Package list", "Documentation", "Test file"], correctAnswer: 1, answered: false },
      { id: 10, question: "How to create virtual environment?", options: ["python -m venv name", "pip install venv", "import venv", "virtual env"], correctAnswer: 0, answered: false }
    ]
  },
  {
    id: 13,
    title: "List Comprehensions",
    description: "Create lists efficiently with comprehensions",
    difficulty: "Advanced",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "Basic list comprehension syntax?", back: "[expression for item in iterable]", flipped: false },
      { id: 2, front: "List comprehension with condition?", back: "[expression for item in iterable if condition]", flipped: false },
      { id: 3, front: "Multiple for loops?", back: "[expression for x in iterable1 for y in iterable2]", flipped: false },
      { id: 4, front: "Nested list comprehensions?", back: "[[expression for item in inner] for inner in outer]", flipped: false },
      { id: 5, front: "Dictionary comprehensions?", back: "{key_expr: value_expr for item in iterable}", flipped: false },
      { id: 6, front: "Set comprehensions?", back: "{expression for item in iterable}", flipped: false },
      { id: 7, front: "Generator expressions?", back: "(expression for item in iterable) - lazy evaluation", flipped: false },
      { id: 8, front: "Conditional expression in comprehension?", back: "[expr_if_true if condition else expr_if_false for item in iterable]", flipped: false },
      { id: 9, front: "When to use comprehensions?", back: "When creating new lists/dicts/sets from existing iterables", flipped: false },
      { id: 10, front: "Performance benefits?", back: "Usually faster than equivalent for loops", flipped: false }
    ],
    questions: [
      { id: 1, question: "What is [x*2 for x in range(3)]?", options: ["[0,1,2]", "[0,2,4]", "[2,4,6]", "Error"], correctAnswer: 1, answered: false },
      { id: 2, question: "What is [x for x in range(5) if x%2==0]?", options: ["[0,2,4]", "[1,3]", "[0,1,2,3,4]", "[2,4]"], correctAnswer: 0, answered: false },
      { id: 3, question: "What creates a dictionary?", options: ["[k:v for k,v in items]", "{k:v for k,v in items}", "(k:v for k,v in items)", "<k:v for k,v in items>"], correctAnswer: 1, answered: false },
      { id: 4, question: "What is [x+y for x in [1,2] for y in [3,4]]?", options: ["[1,2,3,4]", "[4,5,5,6]", "[4,6]", "Error"], correctAnswer: 1, answered: false },
      { id: 5, question: "Difference between [] and ()?", options: ["No difference", "[] is list, () is generator", "() is tuple", "[] is faster"], correctAnswer: 1, answered: false },
      { id: 6, question: "What is {x for x in [1,1,2,2]}?", options: ["[1,1,2,2]", "{1,2}", "[1,2]", "Error"], correctAnswer: 1, answered: false },
      { id: 7, question: "What is [x if x>0 else 0 for x in [-1,1,-2,2]]?", options: ["[0,1,0,2]", "[-1,1,-2,2]", "[1,2]", "Error"], correctAnswer: 0, answered: false },
      { id: 8, question: "What creates nested list?", options: ["[x for x in [y for y in range(3)]]", "[[y for y in range(3)] for x in range(2)]", "[x,y for x in range(2) for y in range(3)]", "All wrong"], correctAnswer: 1, answered: false },
      { id: 9, question: "When is generator better than list?", options: ["Never", "For large datasets", "Always", "Only with functions"], correctAnswer: 1, answered: false },
      { id: 10, question: "Can comprehensions have side effects?", options: ["Yes, always", "No, never", "Yes, but avoid it", "Only in generators"], correctAnswer: 2, answered: false }
    ]
  },
  {
    id: 14,
    title: "Advanced Topics",
    description: "Explore decorators, generators, and advanced concepts",
    difficulty: "Advanced",
    unlocked: false,
    completed: false,
    flashcards: [
      { id: 1, front: "What are decorators?", back: "Functions that modify other functions using @decorator syntax", flipped: false },
      { id: 2, front: "Basic decorator syntax?", back: "@decorator_name\ndef function():\n    pass", flipped: false },
      { id: 3, front: "What are generators?", back: "Functions using yield that return iterators for lazy evaluation", flipped: false },
      { id: 4, front: "yield vs return?", back: "return exits function, yield pauses and can resume", flipped: false },
      { id: 5, front: "What are context managers?", back: "Objects for use with 'with' statement (__enter__ and __exit__)", flipped: false },
      { id: 6, front: "What is *args and **kwargs?", back: "Variable arguments: *args for positional, **kwargs for keyword", flipped: false },
      { id: 7, front: "What are metaclasses?", back: "Classes that define how classes are created", flipped: false },
      { id: 8, front: "Property decorators?", back: "@property, @setter, @deleter for attribute access control", flipped: false },
      { id: 9, front: "What is closure?", back: "Function that captures variables from enclosing scope", flipped: false },
      { id: 10, front: "What are magic methods?", back: "__add__, __str__, __len__ etc. Define object behavior", flipped: false }
    ],
    questions: [
      { id: 1, question: "What does @property do?", options: ["Creates variable", "Makes method act like attribute", "Adds documentation", "Nothing"], correctAnswer: 1, answered: false },
      { id: 2, question: "What does yield do?", options: ["Returns value and exits", "Returns value and pauses", "Prints value", "Creates list"], correctAnswer: 1, answered: false },
      { id: 3, question: "What is next() for?", options: ["Lists", "Generators", "Dictionaries", "Strings"], correctAnswer: 1, answered: false },
      { id: 4, question: "How to create context manager?", options: ["__enter__ and __exit__", "@contextmanager", "contextlib.contextmanager", "All of the above"], correctAnswer: 3, answered: false },
      { id: 5, question: "What does @functools.wraps do?", options: ["Creates wrapper", "Preserves function metadata", "Adds functionality", "Nothing special"], correctAnswer: 1, answered: false },
      { id: 6, question: "What is list(generator)?", options: ["Error", "Empty list", "List of values", "Generator object"], correctAnswer: 2, answered: false },
      { id: 7, question: "Can generators be reused?", options: ["Yes, always", "No, they're consumed", "Sometimes", "Only with reset()"], correctAnswer: 1, answered: false },
      { id: 8, question: "What is closure example?", options: ["Global variable", "Function returning function", "Class method", "Module import"], correctAnswer: 1, answered: false },
      { id: 9, question: "What does __call__ method do?", options: ["Deletes object", "Makes object callable", "Prints object", "Copies object"], correctAnswer: 1, answered: false },
      { id: 10, question: "When are metaclasses used?", options: ["Always", "Never", "Rarely, for advanced cases", "Only with classes"], correctAnswer: 2, answered: false }
    ]
  }
];